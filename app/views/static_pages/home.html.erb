<% provide(:title, 'Home') %>
<div>
	<%= link_to "Start the Game!", '#', id: "start-button", class: "start_button button orange" %>
	<div id="view-element", style="display:none"></div>
</div>
<script>
  var camera, scene, renderer,
  geometry, material, globe;
  var trackball, projector;
  var windowWidth=670, windowHeight=400;
  var network, gameplay;
  var viewer = $('#view-element').get(0);

  $('#start-button').click(function() {
  	init();
  	$('#view-element').append(renderer.domElement);
  	$('#start-button').fadeOut('fast');
  	$('#view-element').show('slow');
  	animate();
  });

  function closestVertex(face, point, vertices) {
  	var vertexSet = null;
		if(face instanceof THREE.Face3) {
			vertexSet = [face.a, face.b, face.c];
		} else if(face instanceof THREE.Face4) {
			vertexSet = [face.a, face.b, face.c, face.d];
		}
		
		var minimumDist = Infinity;
		var index;
		for(var i=0; i<vertexSet.length; i++) {
			var vertex = vertices[vertexSet[i]].position;
			var dist = vertex.distanceToSquared(point);
			
			if(dist<minimumDist) {
				minimumDist=dist;
				index=vertexSet[i];
			}
		}

		return index;
  }

  function init() {
      scene = new THREE.Scene();

      camera = new THREE.PerspectiveCamera( 75, windowWidth / windowHeight, 1, 10000 );
      camera.position.z = 1000;
      scene.add( camera );

      geometry = new THREE.IcosahedronGeometry( 0 );
      subdivision = new THREE.SubdivisionModifier (2);
      subdivision.modify(geometry);
      spherical = new GLOBE.SphericalModifier(600);
      spherical.modify(geometry);
      connectivity = new GLOBE.ConnectivityModifier();
      network = connectivity.modify(geometry);
      material = new THREE.MeshLambertMaterial( { color: 0xff0000 } );
      globe = new THREE.Mesh( geometry, material );
      scene.add( globe );

      gameplay = new GLOBE.Gameplay(network, globe);

      var pointLight = new THREE.PointLight(0x777777);
      pointLight.position.x = -250;
      pointLight.position.y = 250;
      pointLight.position.z  = 1000;
      camera.add(pointLight);

      var ambientLight = new THREE.AmbientLight(0x777777);
      scene.add(ambientLight);

      projector = new THREE.Projector();

      if(window.WebGLRenderingContext) {
      	try {
      		renderer = new THREE.WebGLRenderer();
	      } catch (e) {	}
      }
      if(renderer==null) {
      	renderer = new THREE.CanvasRenderer();
    	}
      renderer.setSize( windowWidth, windowHeight );

      var viewer = renderer.domElement;
      trackball = new GLOBE.TrackballControls(camera, viewer);
      trackball.noZoom = true;
      trackball.noPan = true;
      viewer.addEventListener( 'mousedown', function(event) {
      	if(event.button == 2 ) {
      		var rect = viewer.getBoundingClientRect();
    			var vector = new THREE.Vector3( ( (event.clientX-rect.left) / rect.width ) * 2 - 1, ( (rect.bottom-event.clientY) / rect.height ) * 2 - 1, 0.5 );
    			
    			projector.unprojectVector( vector, camera );
					var ray = new THREE.Ray( camera.position, vector.subSelf( camera.position ).normalize() );
					var intersects = ray.intersectScene( scene );

					if(intersects.length > 0 && intersects[0].object==globe) {
						var closest=closestVertex(intersects[0].face, intersects[0].point, geometry.vertices);
						gameplay.handlePlacement(closest);

						event.preventDefault();
						event.stopPropagation();
					}
  			}
      }, false);
  }

  function animate() {
      // note: three.js includes requestAnimationFrame shim
      requestAnimationFrame( animate );
      trackball.update();
      render();
  }

  function render() {
      //mesh.rotation.x += 0.01;
      //mesh.rotation.y += 0.02;

      renderer.render( scene, camera );
  }
</script>